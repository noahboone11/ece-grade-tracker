<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ECE Term 4 Grade Tracker</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            color: white;
            margin-bottom: 30px;
            position: relative;
        }

        .user-info {
            position: absolute;
            top: 0;
            right: 0;
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: rgba(255,255,255,0.2);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 1.2rem;
        }

        .logout-btn {
            background: rgba(255,255,255,0.2);
            border: 2px solid rgba(255,255,255,0.3);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .logout-btn:hover {
            background: rgba(255,255,255,0.3);
            border-color: rgba(255,255,255,0.5);
        }

        .login-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .login-form {
            background: white;
            padding: 40px;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            max-width: 400px;
            width: 90%;
            text-align: center;
        }

        .login-form h2 {
            margin-bottom: 30px;
            color: #333;
            font-size: 2rem;
        }

        .form-group {
            margin-bottom: 20px;
            text-align: left;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #555;
            font-weight: 600;
        }

        .form-group input {
            width: 100%;
            padding: 15px;
            border: 2px solid #e0e6ed;
            border-radius: 10px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .login-btn, .register-btn {
            width: 100%;
            padding: 15px;
            border: none;
            border-radius: 10px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 15px;
        }

        .login-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .register-btn {
            background: transparent;
            color: #667eea;
            border: 2px solid #667eea;
        }

        .login-btn:hover, .register-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        .welcome-text {
            color: rgba(255,255,255,0.9);
            margin-bottom: 10px;
        }

        .header h1 {
            font-size: 3rem;
            font-weight: 700;
            margin-bottom: 10px;
            margin-top: 80px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .header p {
            font-size: 1.2rem;
            opacity: 0.9;
        }

        .track-selector {
            background: white;
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            text-align: center;
        }

        .track-selector h2 {
            margin-bottom: 20px;
            color: #333;
        }

        .track-buttons {
            display: flex;
            gap: 20px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .track-btn {
            padding: 15px 30px;
            border: none;
            border-radius: 10px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 200px;
        }

        .track-btn.electrical {
            background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
            color: #8b4513;
        }

        .track-btn.computer {
            background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
            color: #2c3e50;
        }

        .track-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        .track-btn.active {
            transform: scale(1.05);
            box-shadow: 0 8px 25px rgba(0,0,0,0.3);
        }

        .dashboard {
            display: none;
        }

        .dashboard.active {
            display: block;
        }

        .stats-overview {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            text-align: center;
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
        }

        .stat-card h3 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 10px;
        }

        .stat-card p {
            color: #666;
            font-weight: 500;
        }

        .gpa {
            color: #27ae60;
        }

        .courses-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 25px;
        }

        .course-card {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }

        .course-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 12px 35px rgba(0,0,0,0.15);
        }

        .course-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            cursor: pointer;
            user-select: none;
        }

        .course-header:hover {
            opacity: 0.8;
        }

        .course-summary {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .course-info h3 {
            margin: 0;
            font-size: 1.2rem;
            color: #2c3e50;
        }

        .course-info p {
            margin: 5px 0 0 0;
            font-size: 0.9rem;
            color: #666;
        }

        .course-stats {
            text-align: right;
        }

        .course-grade-display {
            font-size: 1.8rem;
            font-weight: 700;
            color: #27ae60;
            margin: 0;
        }

        .expand-indicator {
            font-size: 1.2rem;
            color: #666;
            transition: transform 0.3s ease;
            margin-left: 10px;
        }

        .course-card.expanded .expand-indicator {
            transform: rotate(180deg);
        }

        .course-details {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.4s ease;
        }

        .course-card.expanded .course-details {
            max-height: 2000px;
        }

        .course-details-content {
            padding-top: 20px;
            border-top: 2px solid #f0f0f0;
        }

        .assessment-group {
            margin-bottom: 20px;
        }

        .assessment-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .assessment-title {
            font-weight: 600;
            color: #555;
        }

        .assessment-weight {
            font-size: 0.9rem;
            color: #888;
            background: #f8f9fa;
            padding: 4px 8px;
            border-radius: 20px;
        }

        .assessment-inputs {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 10px;
        }

        .input-group {
            display: flex;
            flex-direction: column;
        }

        .input-group label {
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 5px;
        }

        .input-group input {
            padding: 12px;
            border: 2px solid #e0e6ed;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .input-group input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e0e6ed;
            border-radius: 4px;
            overflow: hidden;
            margin-top: 15px;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea, #764ba2);
            border-radius: 4px;
            transition: width 0.5s ease;
        }

        .grade-letter {
            display: inline-block;
            padding: 8px 15px;
            border-radius: 20px;
            font-weight: 700;
            margin-top: 10px;
        }

        .grade-a { background: #d4edda; color: #155724; }
        .grade-b { background: #cce5ff; color: #004085; }
        .grade-c { background: #fff3cd; color: #856404; }
        .grade-d { background: #f8d7da; color: #721c24; }
        .grade-f { background: #f5c6cb; color: #721c24; }

        @media (max-width: 768px) {
            .header h1 {
                font-size: 2rem;
            }
            
            .courses-grid {
                grid-template-columns: 1fr;
            }
            
            .track-buttons {
                flex-direction: column;
                align-items: center;
            }
            
            .user-info {
                position: relative;
                margin: 0 auto 20px auto;
                top: 0;
                right: 0;
                justify-content: center;
            }
            
            .header {
                padding-top: 20px;
            }
        }

        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="user-info" id="user-info" style="display: none;">
                <div class="welcome-text" id="welcome-text"></div>
                <div class="user-avatar" id="user-avatar"></div>
                <button class="logout-btn" onclick="logout()">
                    <span style="margin-right: 5px;">👋</span>Logout
                </button>
            </div>
            <h1>📊 ECE Term 4 Grade Tracker</h1>
            <p>Track your academic progress with style</p>
        </div>

        <!-- Login Modal -->
        <div id="login-modal" class="login-modal">
            <div class="login-form">
                <h2>🎓 Welcome Back!</h2>
                <div id="login-section">
                    <div class="form-group">
                        <label for="username">Username</label>
                        <input type="text" id="username" placeholder="Enter your username" required>
                    </div>
                    <div class="form-group">
                        <label for="password">Password</label>
                        <input type="password" id="password" placeholder="Enter your password" required>
                    </div>
                    <button class="login-btn" onclick="login()">Login</button>
                    <button class="register-btn" onclick="showRegister()">Create Account</button>
                    <div style="margin-top: 15px; padding: 10px; background: #f8f9fa; border-radius: 8px; font-size: 0.9rem; color: #666;">
                        <strong>Demo Account:</strong><br>
                        Username: demo_student<br>
                        Password: password123
                    </div>
                </div>
                
                <div id="register-section" style="display: none;">
                    <div class="form-group">
                        <label for="reg-username">Username</label>
                        <input type="text" id="reg-username" placeholder="Choose a username" required>
                    </div>
                    <div class="form-group">
                        <label for="reg-password">Password</label>
                        <input type="password" id="reg-password" placeholder="Choose a password" required>
                    </div>
                    <div class="form-group">
                        <label for="full-name">Full Name</label>
                        <input type="text" id="full-name" placeholder="Enter your full name" required>
                    </div>
                    <div class="form-group">
                        <label for="track-selection">ECE Track</label>
                        <select id="track-selection" required style="width: 100%; padding: 15px; border: 2px solid #e0e6ed; border-radius: 10px; font-size: 1rem;">
                            <option value="">Select your track</option>
                            <option value="electrical">⚡ Electrical Engineering</option>
                            <option value="computer">💻 Computer Engineering</option>
                        </select>
                    </div>
                    <button class="login-btn" onclick="register()">Create Account</button>
                    <button class="register-btn" onclick="showLogin()">Back to Login</button>
                </div>
            </div>
        </div>

        <div class="track-selector" id="main-content" style="display: none;">
            <h2>Select Your ECE Track</h2>
            <div class="track-buttons">
                <button class="track-btn electrical" onclick="selectTrack('electrical')">
                    ⚡ Electrical Engineering
                </button>
                <button class="track-btn computer" onclick="selectTrack('computer')">
                    💻 Computer Engineering
                </button>
            </div>
        </div>

        <!-- Electrical Dashboard -->
        <div id="electrical-dashboard" class="dashboard">
            <div class="stats-overview">
                <div class="stat-card">
                    <h3 class="gpa" id="electrical-gpa">--</h3>
                    <p>Overall GPA</p>
                </div>
                <div class="stat-card">
                    <h3 id="electrical-avg">--%</h3>
                    <p>Average Grade</p>
                </div>
                <div class="stat-card">
                    <h3 id="electrical-courses">5</h3>
                    <p>Total Courses</p>
                </div>
                <div class="stat-card">
                    <h3 id="electrical-credits">15</h3>
                    <p>Credit Hours</p>
                </div>
            </div>

            <div class="courses-grid" id="electrical-courses-grid">
                <!-- Courses will be populated by JavaScript -->
            </div>
        </div>

        <!-- Computer Dashboard -->
        <div id="computer-dashboard" class="dashboard">
            <div class="stats-overview">
                <div class="stat-card">
                    <h3 class="gpa" id="computer-gpa">--</h3>
                    <p>Overall GPA</p>
                </div>
                <div class="stat-card">
                    <h3 id="computer-avg">--%</h3>
                    <p>Average Grade</p>
                </div>
                <div class="stat-card">
                    <h3 id="computer-courses">5</h3>
                    <p>Total Courses</p>
                </div>
                <div class="stat-card">
                    <h3 id="computer-credits">15</h3>
                    <p>Credit Hours</p>
                </div>
            </div>

            <div class="courses-grid" id="computer-courses-grid">
                <!-- Courses will be populated by JavaScript -->
            </div>
        </div>
    </div>

    <script>
        // Course data structure
        const courses = {
            electrical: {
                'ECE 4500': {
                    title: 'Microprocessors',
                    credits: 3,
                    assessments: {
                        'Assignments': { weight: 10, items: ['Assignment 1', 'Assignment 2', 'Assignment 3', 'Assignment 4', 'Assignment 5'] },
                        'Labs': { weight: 16, items: ['Lab 1', 'Lab 2', 'Lab 3', 'Lab 4', 'Lab 5', 'Lab 6', 'Lab 7', 'Lab 8'] },
                        'Quizzes': { weight: 8, items: ['Quiz 1', 'Quiz 2', 'Quiz 3', 'Quiz 4'] },
                        'Midterm': { weight: 16, items: ['Midterm Test'] },
                        'Final': { weight: 50, items: ['Final Exam'] }
                    }
                },
                'ECE 4300': {
                    title: 'Electronic Circuits I',
                    credits: 3,
                    assessments: {
                        'Quizzes': { weight: 10, items: ['Quiz 1', 'Quiz 2', 'Quiz 3'] },
                        'Laboratory': { weight: 15, items: ['Lab 1', 'Lab 2', 'Lab 3', 'Lab 4', 'Lab 5', 'Lab 6', 'Lab 7', 'Lab 8'] },
                        'Term Tests': { weight: 25, items: ['Term Test 1', 'Term Test 2'] },
                        'Final': { weight: 50, items: ['Final Exam'] }
                    }
                },
                'ECE 4600': {
                    title: 'Introduction to Systems and Signals',
                    credits: 3,
                    assessments: {
                        'Assignments': { weight: 12, items: ['Assignment 1', 'Assignment 2', 'Assignment 3', 'Assignment 4', 'Assignment 5', 'Assignment 6'] },
                        'Quizzes': { weight: 15, items: ['Quiz 1', 'Quiz 2'] },
                        'Midterm': { weight: 23, items: ['Midterm Test'] },
                        'Final': { weight: 50, items: ['Final Exam'] }
                    }
                },
                'ENGI 4430': {
                    title: 'Advanced Calculus for Engineering',
                    credits: 3,
                    assessments: {
                        'Quizzes': { weight: 25, items: ['Quiz 1', 'Quiz 2', 'Quiz 3', 'Quiz 4', 'Quiz 5'], dropLowest: 1 },
                        'Midterm': { weight: 25, items: ['Midterm Test'] },
                        'Final': { weight: 50, items: ['Final Exam'] }
                    }
                },
                'ECE 4800': {
                    title: 'Electromechanical Devices',
                    credits: 3,
                    assessments: {
                        'Assignments': { weight: 10, items: ['Assignment 1', 'Assignment 2', 'Assignment 3', 'Assignment 4', 'Assignment 5'] },
                        'Quizzes': { weight: 10, items: ['Quiz 1', 'Quiz 2', 'Quiz 3', 'Quiz 4'] },
                        'Midterm': { weight: 20, items: ['Midterm Test'] },
                        'Lab Work': { weight: 15, items: ['Lab 1', 'Lab 2', 'Lab 3', 'Lab 4', 'Lab 5', 'Lab 6'] },
                        'Final': { weight: 45, items: ['Final Exam'] }
                    }
                }
            },
            computer: {
                'ECE 4500': {
                    title: 'Microprocessors',
                    credits: 3,
                    assessments: {
                        'Assignments': { weight: 10, items: ['Assignment 1', 'Assignment 2', 'Assignment 3', 'Assignment 4', 'Assignment 5'] },
                        'Labs': { weight: 16, items: ['Lab 1', 'Lab 2', 'Lab 3', 'Lab 4', 'Lab 5', 'Lab 6', 'Lab 7', 'Lab 8'] },
                        'Quizzes': { weight: 8, items: ['Quiz 1', 'Quiz 2', 'Quiz 3', 'Quiz 4'] },
                        'Midterm': { weight: 16, items: ['Midterm Test'] },
                        'Final': { weight: 50, items: ['Final Exam'] }
                    }
                },
                'ECE 4110': {
                    title: 'Discrete Mathematics for Computer Engineering',
                    credits: 3,
                    assessments: {
                        'Quizzes': { weight: 25, items: ['Quiz 1', 'Quiz 2', 'Quiz 3', 'Quiz 4', 'Quiz 5'], dropLowest: 1 },
                        'Midterm': { weight: 25, items: ['Midterm Test'] },
                        'Final': { weight: 50, items: ['Final Exam'] }
                    }
                },
                'ECE 4300': {
                    title: 'Electronic Circuits I',
                    credits: 3,
                    assessments: {
                        'Quizzes': { weight: 10, items: ['Quiz 1', 'Quiz 2', 'Quiz 3'] },
                        'Laboratory': { weight: 15, items: ['Lab 1', 'Lab 2', 'Lab 3', 'Lab 4', 'Lab 5', 'Lab 6', 'Lab 7', 'Lab 8'] },
                        'Term Tests': { weight: 25, items: ['Term Test 1', 'Term Test 2'] },
                        'Final': { weight: 50, items: ['Final Exam'] }
                    }
                },
                'ECE 4400': {
                    title: 'Data Structures',
                    credits: 3,
                    assessments: {
                        'Assignments': { weight: 20, items: ['Assignment 1', 'Assignment 2', 'Assignment 3', 'Assignment 4', 'Assignment 5'] },
                        'Midterm': { weight: 25, items: ['Midterm Test'] },
                        'Coding Assessment': { weight: 20, items: ['Assessment 1', 'Assessment 2', 'Assessment 3', 'Assessment 4', 'Assessment 5'], dropLowest: 1 },
                        'Final': { weight: 35, items: ['Final Exam'] }
                    }
                },
                'ECE 4600': {
                    title: 'Introduction to Systems and Signals',
                    credits: 3,
                    assessments: {
                        'Assignments': { weight: 12, items: ['Assignment 1', 'Assignment 2', 'Assignment 3', 'Assignment 4', 'Assignment 5', 'Assignment 6'] },
                        'Quizzes': { weight: 15, items: ['Quiz 1', 'Quiz 2'] },
                        'Midterm': { weight: 23, items: ['Midterm Test'] },
                        'Final': { weight: 50, items: ['Final Exam'] }
                    }
                }
            }
        };

        let selectedTrack = null;
        let grades = {};
        let currentUser = null;
        
        // In-memory storage (since localStorage isn't available in Claude.ai)
        let usersDatabase = {
            'demo_student': {
                username: 'demo_student',
                password: 'password123',
                fullName: 'Demo Student',
                track: 'electrical',
                grades: {},
                selectedTrack: 'electrical'
            }
        };
        let currentUserSession = null;

        function login() {
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            
            if (!username || !password) {
                alert('Please enter both username and password');
                return;
            }
            
            if (usersDatabase[username] && usersDatabase[username].password === password) {
                currentUser = usersDatabase[username];
                currentUserSession = username;
                showMainApp();
                loadUserData();
            } else {
                alert('Invalid username or password\n\nTry demo account:\nUsername: demo_student\nPassword: password123');
            }
        }

        function register() {
            const username = document.getElementById('reg-username').value;
            const password = document.getElementById('reg-password').value;
            const fullName = document.getElementById('full-name').value;
            const track = document.getElementById('track-selection').value;
            
            if (!username || !password || !fullName || !track) {
                alert('Please fill in all fields including your ECE track');
                return;
            }
            
            if (usersDatabase[username]) {
                alert('Username already exists');
                return;
            }
            
            // Create new user
            usersDatabase[username] = {
                username: username,
                password: password,
                fullName: fullName,
                track: track,
                grades: {},
                selectedTrack: track
            };
            
            // Auto-login
            currentUser = usersDatabase[username];
            currentUserSession = username;
            showMainApp();
            loadUserData();
        }

        function logout() {
            saveUserData();
            currentUser = null;
            currentUserSession = null;
            selectedTrack = null;
            grades = {};
            
            // Hide main content and dashboards
            document.getElementById('main-content').style.display = 'none';
            document.getElementById('user-info').style.display = 'none';
            document.querySelectorAll('.dashboard').forEach(d => d.classList.remove('active'));
            
            // Show login modal
            document.getElementById('login-modal').style.display = 'flex';
            
            // Reset track buttons
            document.querySelectorAll('.track-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Clear form fields
            document.getElementById('username').value = '';
            document.getElementById('password').value = '';
            document.getElementById('reg-username').value = '';
            document.getElementById('reg-password').value = '';
            document.getElementById('full-name').value = '';
            document.getElementById('track-selection').value = '';
        }

        function showMainApp() {
            document.getElementById('login-modal').style.display = 'none';
            document.getElementById('main-content').style.display = 'none'; // Hide track selector
            document.getElementById('user-info').style.display = 'flex';
            
            // Update user display
            document.getElementById('welcome-text').textContent = `Welcome, ${currentUser.fullName}`;
            document.getElementById('user-avatar').textContent = currentUser.fullName.charAt(0).toUpperCase();
            
            // Auto-select user's track and show dashboard
            if (currentUser.track) {
                selectedTrack = currentUser.track;
                
                // Show appropriate dashboard directly
                document.querySelectorAll('.dashboard').forEach(dashboard => {
                    dashboard.classList.remove('active');
                });
                document.getElementById(`${currentUser.track}-dashboard`).classList.add('active');
                
                // Initialize grades for this track
                if (!grades[currentUser.track]) {
                    grades[currentUser.track] = {};
                    Object.keys(courses[currentUser.track]).forEach(courseCode => {
                        grades[currentUser.track][courseCode] = {};
                    });
                }
                
                // Render courses
                renderCourses(currentUser.track);
                updateOverallStats(currentUser.track);
            }
        }

        function showRegister() {
            document.getElementById('login-section').style.display = 'none';
            document.getElementById('register-section').style.display = 'block';
        }

        function showLogin() {
            document.getElementById('register-section').style.display = 'none';
            document.getElementById('login-section').style.display = 'block';
        }

        function saveUserData() {
            if (!currentUser || !currentUserSession) return;
            
            usersDatabase[currentUserSession].grades = grades;
            usersDatabase[currentUserSession].selectedTrack = selectedTrack;
            usersDatabase[currentUserSession].track = currentUser.track; // Preserve original track selection
        }

        function loadUserData() {
            if (!currentUser) return;
            
            grades = currentUser.grades || {};
            selectedTrack = currentUser.selectedTrack;
            
            if (selectedTrack) {
                selectTrack(selectedTrack);
            }
        }

        // Auto-save data every 10 seconds
        setInterval(() => {
            if (currentUser) {
                saveUserData();
            }
        }, 10000);

        function selectTrack(track) {
            selectedTrack = track;
            
            // Save track selection
            saveUserData();
            
            // Update button states
            document.querySelectorAll('.track-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            document.querySelector(`.track-btn.${track}`).classList.add('active');
            
            // Show appropriate dashboard
            document.querySelectorAll('.dashboard').forEach(dashboard => {
                dashboard.classList.remove('active');
            });
            document.getElementById(`${track}-dashboard`).classList.add('active');
            
            // Initialize grades for this track
            if (!grades[track]) {
                grades[track] = {};
                Object.keys(courses[track]).forEach(courseCode => {
                    grades[track][courseCode] = {};
                });
            }
            
            // Render courses
            renderCourses(track);
            updateOverallStats(track);
        }

        function renderCourses(track) {
            const coursesGrid = document.getElementById(`${track}-courses-grid`);
            coursesGrid.innerHTML = '';
            
            Object.entries(courses[track]).forEach(([courseCode, courseData]) => {
                const courseCard = createCourseCard(courseCode, courseData, track);
                coursesGrid.appendChild(courseCard);
            });
        }

        function createCourseCard(courseCode, courseData, track) {
            const card = document.createElement('div');
            card.className = 'course-card';
            card.id = `course-${courseCode.replace(/\s/g, '-')}-${track}`;
            
            const currentGrade = calculateCourseGrade(courseCode, track);
            const letterGrade = getLetterGrade(currentGrade);
            
            card.innerHTML = `
                <div class="course-header" onclick="toggleCourseExpansion('${courseCode}', '${track}')">
                    <div class="course-summary">
                        <div class="course-info">
                            <h3>${courseCode}</h3>
                            <p>${courseData.title} • ${courseData.credits} credits</p>
                        </div>
                        <div class="course-stats">
                            <div class="course-grade-display">${currentGrade.toFixed(1)}%</div>
                            <div class="grade-letter grade-${letterGrade.toLowerCase()}">${letterGrade}</div>
                        </div>
                    </div>
                    <span class="expand-indicator">▼</span>
                </div>
                
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${Math.min(currentGrade, 100)}%"></div>
                </div>
                
                <div class="course-details">
                    <div class="course-details-content">
                        ${Object.entries(courseData.assessments).map(([category, data]) => 
                            createAssessmentSection(courseCode, category, data, track)
                        ).join('')}
                    </div>
                </div>
            `;
            
            return card;
        }

        function toggleCourseExpansion(courseCode, track) {
            const card = document.getElementById(`course-${courseCode.replace(/\s/g, '-')}-${track}`);
            card.classList.toggle('expanded');
        }

        function createAssessmentSection(courseCode, category, data, track) {
            const courseGrades = grades[track] && grades[track][courseCode] && grades[track][courseCode][category] || {};
            
            return `
                <div class="assessment-group">
                    <div class="assessment-header">
                        <span class="assessment-title">${category}</span>
                        <span class="assessment-weight">${data.weight}%</span>
                    </div>
                    <div class="assessment-inputs">
                        ${data.items.map(item => {
                            const currentValue = courseGrades[item] || '';
                            return `
                                <div class="input-group">
                                    <label for="${courseCode}-${category}-${item}">${item}</label>
                                    <input 
                                        type="number" 
                                        id="${courseCode}-${category}-${item}"
                                        min="0" 
                                        max="100" 
                                        step="0.1"
                                        placeholder="0-100"
                                        value="${currentValue}"
                                        onchange="updateGrade('${courseCode}', '${category}', '${item}', this.value, '${track}')"
                                    />
                                </div>
                            `;
                        }).join('')}
                    </div>
                </div>
            `;
        }

        function updateGrade(courseCode, category, item, value, track) {
            if (!grades[track][courseCode][category]) {
                grades[track][courseCode][category] = {};
            }
            
            grades[track][courseCode][category][item] = value ? parseFloat(value) : null;
            
            // Save user data
            saveUserData();
            
            // Re-render the specific course card while preserving expansion state
            const cardId = `course-${courseCode.replace(/\s/g, '-')}-${track}`;
            const oldCard = document.getElementById(cardId);
            const wasExpanded = oldCard.classList.contains('expanded');
            
            const coursesGrid = document.getElementById(`${track}-courses-grid`);
            const courseIndex = Object.keys(courses[track]).indexOf(courseCode);
            const courseCard = coursesGrid.children[courseIndex];
            
            const newCard = createCourseCard(courseCode, courses[track][courseCode], track);
            if (wasExpanded) {
                newCard.classList.add('expanded');
            }
            coursesGrid.replaceChild(newCard, courseCard);
            
            // Update overall stats
            updateOverallStats(track);
        }

        function calculateCourseGrade(courseCode, track) {
            const courseData = courses[track][courseCode];
            const courseGrades = grades[track][courseCode];
            let totalWeightedScore = 0;
            let totalWeight = 0;
            
            Object.entries(courseData.assessments).forEach(([category, data]) => {
                const categoryGrades = courseGrades[category] || {};
                const scores = data.items.map(item => categoryGrades[item]).filter(score => score !== null && score !== undefined);
                
                if (scores.length > 0) {
                    let categoryAverage;
                    
                    if (data.dropLowest && scores.length > data.dropLowest) {
                        // Drop lowest grades
                        scores.sort((a, b) => b - a); // Sort descending
                        const keepScores = scores.slice(0, scores.length - data.dropLowest);
                        categoryAverage = keepScores.reduce((sum, score) => sum + score, 0) / keepScores.length;
                    } else {
                        categoryAverage = scores.reduce((sum, score) => sum + score, 0) / scores.length;
                    }
                    
                    totalWeightedScore += categoryAverage * data.weight;
                    totalWeight += data.weight;
                }
            });
            
            return totalWeight > 0 ? totalWeightedScore / totalWeight : 0;
        }

        function updateOverallStats(track) {
            const courseGrades = Object.keys(courses[track]).map(courseCode => 
                calculateCourseGrade(courseCode, track)
            ).filter(grade => grade > 0);
            
            const average = courseGrades.length > 0 ? 
                courseGrades.reduce((sum, grade) => sum + grade, 0) / courseGrades.length : 0;
            
            const gpa = convertToGPA(average);
            
            document.getElementById(`${track}-avg`).textContent = `${average.toFixed(1)}%`;
            document.getElementById(`${track}-gpa`).textContent = gpa.toFixed(2);
        }

        function getLetterGrade(percentage) {
            if (percentage >= 90) return 'A';
            if (percentage >= 80) return 'B';
            if (percentage >= 70) return 'C';
            if (percentage >= 60) return 'D';
            return 'F';
        }

        function convertToGPA(percentage) {
            if (percentage >= 90) return 4.0;
            if (percentage >= 85) return 3.7;
            if (percentage >= 80) return 3.3;
            if (percentage >= 77) return 3.0;
            if (percentage >= 73) return 2.7;
            if (percentage >= 70) return 2.3;
            if (percentage >= 67) return 2.0;
            if (percentage >= 63) return 1.7;
            if (percentage >= 60) return 1.3;
            if (percentage >= 57) return 1.0;
            return 0.0;
        }

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            // Show login modal
            document.getElementById('login-modal').style.display = 'flex';
            
            // Add enter key support for login
            document.getElementById('password').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    login();
                }
            });
            
            document.getElementById('reg-password').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    register();
                }
            });
            
            document.getElementById('full-name').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    register();
                }
            });
            
            // Pre-fill demo credentials for easy testing
            document.getElementById('username').value = 'demo_student';
            document.getElementById('password').value = 'password123';
        });
    </script>
</body>
</html>
